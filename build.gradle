buildscript {
	repositories {
		google()
		jcenter()
	}
	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.0.0'
		classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
	}
}

plugins {
	id 'application'
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.4.20'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
}

group 'com.tb24'
version '6.0.0'

sourceCompatibility = 1.8

ext {
	javaMainClass = 'com.tb24.discordbot.DiscordBot'
}

application {
	mainClassName = javaMainClass
}

jar {
	manifest {
		attributes 'Main-Class': javaMainClass
	}
}

repositories {
	google()
	jcenter()
	mavenCentral()
	maven { url "https://dl.bintray.com/fungamesleaks/mavenRepo" }
	maven { url 'https://libraries.minecraft.net' }
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'com.google.guava:guava:28.2-jre'
	implementation 'com.mojang:brigadier:1.0.17'
	implementation 'com.mojang:datafixerupper:4.0.26'
	implementation 'com.rethinkdb:rethinkdb-driver:2.4.4'
	implementation 'com.sparkjava:spark-kotlin:1.0.0-alpha'
	implementation 'com.squareup.okhttp3:okhttp:3.14.9'
	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation 'com.tb24:epic-api:+'
	implementation 'me.fungames:JFortniteParse:+'
	implementation('net.dv8tion:JDA:+') { exclude module: 'opus-java' }
	implementation 'net.jodah:expiringmap:0.5.9'
	implementation 'net.sf.trove4j:trove4j:3.0.3'
	implementation 'org.apache.logging.log4j:log4j-api:2.13.3'
	implementation 'org.apache.logging.log4j:log4j-core:2.13.3'
	implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'
	implementation 'org.greenrobot:eventbus:3.2.0'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
	testCompile 'junit:junit:4.13.1'
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = '1.8'
		freeCompilerArgs += [
				'-Xallow-result-return-type',
				'-Xno-call-assertions',
				'-Xno-param-assertions',
				'-Xno-receiver-assertions',
				'-Xopt-in=kotlin.ExperimentalUnsignedTypes'
		]
	}
}

shadowJar {
	baseName = project.name
	classifier = ''
	archiveVersion = ''
	exclude "**/*.kotlin_builtins"
	exclude "**/*.kotlin_metadata"
	exclude "**/*.kotlin_module"
	exclude 'META-INF/maven/**'
	exclude '**/DEPENDENCIES'
	exclude '**/LGPL2.1'
	exclude '**/LICENSE'
	exclude '**/LICENSE.txt'
	exclude '**/NOTICE'
	exclude '**/NOTICE.txt'
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

task proguard(type: proguard.gradle.ProGuardTask) {
	configuration 'proguard-rules.pro'
	printmapping 'build/mappings.txt'
	injars jar.archiveFile
	outjars 'build/libs/' + project.name + '-min.jar'
	libraryjars System.getProperty('java.home') + '/lib/rt.jar'
//	libraryjars configurations.runtimeClasspath.files
}

//release.finalizedBy(proguard)