buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.1.0'
	}
}

plugins {
	id 'application'
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.5.30-M1'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group 'com.tb24'
version '6.0.0'

sourceCompatibility = 1.8

ext {
	javaMainClass = 'com.tb24.discordbot.DiscordBot'
}

application {
	mainClassName = javaMainClass
}

jar {
	manifest {
		attributes 'Main-Class': javaMainClass
	}
}

repositories {
	google()
	mavenCentral()
	maven { url 'https://jitpack.io' }
	maven { url 'https://libraries.minecraft.net' }
	maven {
		name 'm2-dv8tion'
		url 'https://m2.dv8tion.net/releases'
	}
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation 'com.github.FabianFG:JFortniteParse:master-SNAPSHOT'
	implementation 'com.mojang:brigadier:1.0.17'
	implementation 'com.rethinkdb:rethinkdb-driver:2.4.4'
	implementation 'com.tb24:epic-api:+'
	implementation 'dev.morphia.morphia:morphia-kotlin:2.2.3'
	implementation('net.dv8tion:JDA:4.+') { exclude module: 'opus-java' }
	implementation 'net.jodah:expiringmap:0.5.10'
	implementation 'net.sf.trove4j:trove4j:3.0.3'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.graalvm.js:js:21.3.0'
	implementation 'org.quartz-scheduler:quartz:2.3.2'
	testImplementation 'junit:junit:4.13.2'
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = '1.8'
		freeCompilerArgs += [
				'-Xallow-result-return-type',
				'-Xno-call-assertions',
				'-Xno-param-assertions',
				'-Xno-receiver-assertions',
				'-Xopt-in=kotlin.ExperimentalUnsignedTypes'
		]
	}
}

shadowJar {
	baseName = project.name
	classifier = ''
	archiveVersion = ''
	exclude "**/*.kotlin_builtins"
	exclude "**/*.kotlin_metadata"
	exclude "**/*.kotlin_module"
	exclude 'META-INF/maven/**'
	exclude '**/DEPENDENCIES'
	exclude '**/LGPL2.1'
	exclude '**/LICENSE'
	exclude '**/LICENSE.txt'
	exclude '**/NOTICE'
	exclude '**/NOTICE.txt'
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

task proguard(type: proguard.gradle.ProGuardTask) {
	configuration 'proguard-rules.pro'
	printmapping 'build/mappings.txt'
	injars jar.archiveFile
	outjars 'build/libs/' + project.name + '-min.jar'
	libraryjars System.getProperty('java.home') + '/lib/rt.jar'
//	libraryjars configurations.runtimeClasspath.files
}

//release.finalizedBy(proguard)